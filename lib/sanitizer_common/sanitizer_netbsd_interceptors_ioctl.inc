//===-- sanitizer_common_interceptors_ioctl.inc -----------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// Ioctl handling in common sanitizer interceptors.
//===----------------------------------------------------------------------===//

#include "sanitizer_flags.h"

struct ioctl_desc {
  unsigned req;
  // FIXME: support read+write arguments. Currently READWRITE and WRITE do the
  // same thing.
  // XXX: The declarations below may use WRITE instead of READWRITE, unless
  // explicitly noted.
  enum { NONE, READ, WRITE, READWRITE, CUSTOM } type : 3;
  unsigned size : 29;
  const char *name;
};

const unsigned ioctl_table_max = 1333;
static ioctl_desc ioctl_table[ioctl_table_max];
static unsigned ioctl_table_size = 0;

// This can not be declared as a global, because references to struct_*_sz
// require a global initializer. And this table must be available before global
// initializers are run.
static void ioctl_table_fill() {
#define _(rq, tp, sz)                                                          \
  if (IOCTL_##rq != IOCTL_NOT_PRESENT) {                                       \
    CHECK(ioctl_table_size < ioctl_table_max);                                 \
    ioctl_table[ioctl_table_size].req = IOCTL_##rq;                            \
    ioctl_table[ioctl_table_size].type = ioctl_desc::tp;                       \
    ioctl_table[ioctl_table_size].size = sz;                                   \
    ioctl_table[ioctl_table_size].name = #rq;                                  \
    ++ioctl_table_size;                                                        \
  }

  /* Entries from file: altq/altq_afmap.h */
  _(AFM_ADDFMAP, READWRITE);
  _(AFM_DELFMAP, READWRITE);
  _(AFM_CLEANFMAP, READWRITE);
  _(AFM_GETFMAP, READWRITE);
  /* Entries from file: altq/altq.h */
  _(ALTQGTYPE, READWRITE);
  _(ALTQATTACH, WRITE);
  _(ALTQDETACH, WRITE);
  _(ALTQENABLE, WRITE);
  _(ALTQDISABLE, WRITE);
  _(ALTQCLEAR, WRITE);
  _(ALTQCONFIG, READWRITE);
  _(ALTQADDCLASS, READWRITE);
  _(ALTQMODCLASS, READWRITE);
  _(ALTQDELCLASS, READWRITE);
  _(ALTQADDFILTER, READWRITE);
  _(ALTQDELFILTER, READWRITE);
  _(ALTQGETSTATS, READWRITE);
  _(ALTQGETCNTR, READWRITE);
  _(ALTQTBRSET, WRITE);
  _(ALTQTBRGET, READWRITE);
  /* Entries from file: altq/altq_blue.h */
  _(BLUE_IF_ATTACH, WRITE);
  _(BLUE_IF_DETACH, WRITE);
  _(BLUE_ENABLE, WRITE);
  _(BLUE_DISABLE, WRITE);
  _(BLUE_CONFIG, READWRITE);
  _(BLUE_GETSTATS, READWRITE);
  /* Entries from file: altq/altq_cbq.h */
  _(CBQ_IF_ATTACH, WRITE);
  _(CBQ_IF_DETACH, WRITE);
  _(CBQ_ENABLE, WRITE);
  _(CBQ_DISABLE, WRITE);
  _(CBQ_CLEAR_HIERARCHY, WRITE);
  _(CBQ_ADD_CLASS, READWRITE);
  _(CBQ_DEL_CLASS, WRITE);
  _(CBQ_MODIFY_CLASS, READWRITE);
  _(CBQ_ADD_FILTER, READWRITE);
  _(CBQ_DEL_FILTER, WRITE);
  _(CBQ_GETSTATS, READWRITE);
  /* Entries from file: altq/altq_cdnr.h */
  _(CDNR_IF_ATTACH, WRITE);
  _(CDNR_IF_DETACH, WRITE);
  _(CDNR_ENABLE, WRITE);
  _(CDNR_DISABLE, WRITE);
  _(CDNR_ADD_FILTER, READWRITE);
  _(CDNR_DEL_FILTER, WRITE);
  _(CDNR_GETSTATS, READWRITE);
  _(CDNR_ADD_ELEM, READWRITE);
  _(CDNR_DEL_ELEM, WRITE);
  _(CDNR_ADD_TBM, READWRITE);
  _(CDNR_MOD_TBM, WRITE);
  _(CDNR_TBM_STATS, READWRITE);
  _(CDNR_ADD_TCM, READWRITE);
  _(CDNR_MOD_TCM, READWRITE);
  _(CDNR_TCM_STATS, READWRITE);
  _(CDNR_ADD_TSW, READWRITE);
  _(CDNR_MOD_TSW, READWRITE);
  /* Entries from file: altq/altq_fifoq.h */
  _(FIFOQ_IF_ATTACH, WRITE);
  _(FIFOQ_IF_DETACH, WRITE);
  _(FIFOQ_ENABLE, WRITE);
  _(FIFOQ_DISABLE, WRITE);
  _(FIFOQ_CONFIG, READWRITE);
  _(FIFOQ_GETSTATS, READWRITE);
  /* Entries from file: altq/altq_hfsc.h */
  _(HFSC_IF_ATTACH, WRITE);
  _(HFSC_IF_DETACH, WRITE);
  _(HFSC_ENABLE, WRITE);
  _(HFSC_DISABLE, WRITE);
  _(HFSC_CLEAR_HIERARCHY, WRITE);
  _(HFSC_ADD_CLASS, READWRITE);
  _(HFSC_DEL_CLASS, WRITE);
  _(HFSC_MOD_CLASS, WRITE);
  _(HFSC_ADD_FILTER, READWRITE);
  _(HFSC_DEL_FILTER, WRITE);
  _(HFSC_GETSTATS, READWRITE);
  /* Entries from file: altq/altq_jobs.h */
  _(JOBS_IF_ATTACH, WRITE);
  _(JOBS_IF_DETACH, WRITE);
  _(JOBS_ENABLE, WRITE);
  _(JOBS_DISABLE, WRITE);
  _(JOBS_CLEAR, WRITE);
  _(JOBS_ADD_CLASS, READWRITE);
  _(JOBS_DEL_CLASS, WRITE);
  _(JOBS_MOD_CLASS, WRITE);
  _(JOBS_ADD_FILTER, READWRITE);
  _(JOBS_DEL_FILTER, WRITE);
  _(JOBS_GETSTATS, READWRITE);
  /* Entries from file: altq/altq_priq.h */
  _(PRIQ_IF_ATTACH, WRITE);
  _(PRIQ_IF_DETACH, WRITE);
  _(PRIQ_ENABLE, WRITE);
  _(PRIQ_DISABLE, WRITE);
  _(PRIQ_CLEAR, WRITE);
  _(PRIQ_ADD_CLASS, READWRITE);
  _(PRIQ_DEL_CLASS, WRITE);
  _(PRIQ_MOD_CLASS, WRITE);
  _(PRIQ_ADD_FILTER, READWRITE);
  _(PRIQ_DEL_FILTER, WRITE);
  _(PRIQ_GETSTATS, READWRITE);
  /* Entries from file: altq/altq_red.h */
  _(RED_IF_ATTACH, WRITE);
  _(RED_IF_DETACH, WRITE);
  _(RED_ENABLE, WRITE);
  _(RED_DISABLE, WRITE);
  _(RED_CONFIG, READWRITE);
  _(RED_GETSTATS, READWRITE);
  _(RED_SETDEFAULTS, WRITE);
  /* Entries from file: altq/altq_rio.h */
  _(RIO_IF_ATTACH, WRITE);
  _(RIO_IF_DETACH, WRITE);
  _(RIO_ENABLE, WRITE);
  _(RIO_DISABLE, WRITE);
  _(RIO_CONFIG, READWRITE);
  _(RIO_GETSTATS, READWRITE);
  _(RIO_SETDEFAULTS, WRITE);
  /* Entries from file: altq/altq_wfq.h */
  _(WFQ_IF_ATTACH, WRITE);
  _(WFQ_IF_DETACH, WRITE);
  _(WFQ_ENABLE, WRITE);
  _(WFQ_DISABLE, WRITE);
  _(WFQ_CONFIG, READWRITE);
  _(WFQ_GET_STATS, READWRITE);
  _(WFQ_GET_QID, READWRITE);
  _(WFQ_SET_WEIGHT, READWRITE);
  /* Entries from file: crypto/cryptodev.h */
  _(CRIOGET, READWRITE);
  _(CIOCFSESSION, WRITE);
  _(CIOCKEY, READWRITE);
  _(CIOCNFKEYM, READWRITE);
  _(CIOCNFSESSION, WRITE);
  _(CIOCNCRYPTRETM, READWRITE);
  _(CIOCNCRYPTRET, READWRITE);
  _(CIOCGSESSION, READWRITE);
  _(CIOCNGSESSION, READWRITE);
  _(CIOCCRYPT, READWRITE);
  _(CIOCNCRYPTM, READWRITE);
  _(CIOCASYMFEAT, READ);
  /* Entries from file: dev/apm/apmio.h */
  _(APM_IOC_REJECT, WRITE);
  _(APM_IOC_STANDBY, NONE);
  _(APM_IOC_SUSPEND, NONE);
  _(OAPM_IOC_GETPOWER, READ);
  _(APM_IOC_GETPOWER, READWRITE);
  _(APM_IOC_NEXTEVENT, READ);
  _(APM_IOC_DEV_CTL, WRITE);
  /* Entries from file: dev/dm/netbsd-dm.h */
  _(NETBSD_DM_IOCTL, READWRITE);
  /* Entries from file: dev/dmover/dmover_io.h */
  _(DMIO_SETFUNC, WRITE);
  /* Entries from file: dev/dtv/dtvio_demux.h */
  _(DMX_START, NONE);
  _(DMX_STOP, NONE);
  _(DMX_SET_FILTER, WRITE);
  _(DMX_SET_PES_FILTER, WRITE);
  _(DMX_SET_BUFFER_SIZE, NONE);
  _(DMX_GET_STC, READWRITE);
  _(DMX_ADD_PID, WRITE);
  _(DMX_REMOVE_PID, WRITE);
  _(DMX_GET_CAPS, READ);
  _(DMX_SET_SOURCE, WRITE);
  /* Entries from file: dev/dtv/dtvio_frontend.h */
  _(FE_READ_STATUS, READ);
  _(FE_READ_BER, READ);
  _(FE_READ_SNR, READ);
  _(FE_READ_SIGNAL_STRENGTH, READ);
  _(FE_READ_UNCORRECTED_BLOCKS, READ);
  _(FE_SET_FRONTEND, READWRITE);
  _(FE_GET_FRONTEND, READ);
  _(FE_GET_EVENT, READ);
  _(FE_GET_INFO, READ);
  _(FE_DISEQC_RESET_OVERLOAD, NONE);
  _(FE_DISEQC_SEND_MASTER_CMD, WRITE);
  _(FE_DISEQC_RECV_SLAVE_REPLY, READ);
  _(FE_DISEQC_SEND_BURST, WRITE);
  _(FE_SET_TONE, WRITE);
  _(FE_SET_VOLTAGE, WRITE);
  _(FE_ENABLE_HIGH_LNB_VOLTAGE, WRITE);
  _(FE_SET_FRONTEND_TUNE_MODE, WRITE);
  _(FE_DISHNETWORK_SEND_LEGACY_CMD, WRITE);
  /* Entries from file: dev/filemon/filemon.h */
  _(FILEMON_SET_FD, READWRITE);
  _(FILEMON_SET_PID, READWRITE);
  /* Entries from file: dev/hdaudio/hdaudioio.h */
  _(HDAUDIO_FGRP_INFO, READWRITE);
  _(HDAUDIO_FGRP_GETCONFIG, READWRITE);
  _(HDAUDIO_FGRP_SETCONFIG, READWRITE);
  _(HDAUDIO_FGRP_WIDGET_INFO, READWRITE);
  _(HDAUDIO_FGRP_CODEC_INFO, READWRITE);
  _(HDAUDIO_AFG_WIDGET_INFO, READWRITE);
  _(HDAUDIO_AFG_CODEC_INFO, READWRITE);
  /* Entries from file: dev/hdmicec/hdmicecio.h */
  _(CEC_GET_PHYS_ADDR, READ);
  _(CEC_GET_LOG_ADDRS, READ);
  _(CEC_SET_LOG_ADDRS, WRITE);
  _(CEC_GET_VENDOR_ID, READ);
  /* Entries from file: dev/hpc/hpcfbio.h */
  _(HPCFBIO_GCONF, READWRITE);
  _(HPCFBIO_SCONF, WRITE);
  _(HPCFBIO_GDSPCONF, READWRITE);
  _(HPCFBIO_SDSPCONF, WRITE);
  _(HPCFBIO_GOP, READ);
  _(HPCFBIO_SOP, READWRITE);
  /* Entries from file: dev/i2o/iopio.h */
  _(IOPIOCPT, READWRITE);
  _(IOPIOCGLCT, READWRITE);
  _(IOPIOCGSTATUS, READWRITE);
  _(IOPIOCRECONFIG, NONE);
  _(IOPIOCGTIDMAP, READWRITE);
  /* Entries from file: dev/ic/athioctl.h */
  _(SIOCGATHSTATS, READWRITE);
  _(SIOCGATHDIAG, READWRITE);
  /* Entries from file: dev/ic/bt8xx.h */
  _(METEORCAPTUR, WRITE);
  _(METEORCAPFRM, WRITE);
  _(METEORSETGEO, WRITE);
  _(METEORGETGEO, READ);
  _(METEORSTATUS, READ);
  _(METEORSHUE, WRITE);
  _(METEORGHUE, READ);
  _(METEORSFMT, WRITE);
  _(METEORGFMT, READ);
  _(METEORSINPUT, WRITE);
  _(METEORGINPUT, READ);
  _(METEORSCHCV, WRITE);
  _(METEORGCHCV, READ);
  _(METEORSCOUNT, WRITE);
  _(METEORGCOUNT, READ);
  _(METEORSFPS, WRITE);
  _(METEORGFPS, READ);
  _(METEORSSIGNAL, WRITE);
  _(METEORGSIGNAL, READ);
  _(METEORSVIDEO, WRITE);
  _(METEORGVIDEO, READ);
  _(METEORSBRIG, WRITE);
  _(METEORGBRIG, READ);
  _(METEORSCSAT, WRITE);
  _(METEORGCSAT, READ);
  _(METEORSCONT, WRITE);
  _(METEORGCONT, READ);
  _(METEORSHWS, WRITE);
  _(METEORGHWS, READ);
  _(METEORSVWS, WRITE);
  _(METEORGVWS, READ);
  _(METEORSTS, WRITE);
  _(METEORGTS, READ);
  _(TVTUNER_SETCHNL, WRITE);
  _(TVTUNER_GETCHNL, READ);
  _(TVTUNER_SETTYPE, WRITE);
  _(TVTUNER_GETTYPE, READ);
  _(TVTUNER_GETSTATUS, READ);
  _(TVTUNER_SETFREQ, WRITE);
  _(TVTUNER_GETFREQ, READ);
  _(TVTUNER_SETAFC, WRITE);
  _(TVTUNER_GETAFC, READ);
  _(RADIO_SETMODE, WRITE);
  _(RADIO_GETMODE, READ);
  _(RADIO_SETFREQ, WRITE);
  _(RADIO_GETFREQ, READ);
  _(METEORSACTPIXFMT, WRITE);
  _(METEORGACTPIXFMT, READ);
  _(METEORGSUPPIXFMT, READWRITE);
  _(TVTUNER_GETCHNLSET, READWRITE);
  _(REMOTE_GETKEY, READ);
  /* Entries from file: dev/ic/hd44780var.h */
  _(HLCD_DISPCTL, WRITE);
  _(HLCD_RESET, NONE);
  _(HLCD_CLEAR, NONE);
  _(HLCD_CURSOR_LEFT, NONE);
  _(HLCD_CURSOR_RIGHT, NONE);
  _(HLCD_GET_CURSOR_POS, READ);
  _(HLCD_SET_CURSOR_POS, WRITE);
  _(HLCD_GETC, READ);
  _(HLCD_PUTC, WRITE);
  _(HLCD_SHIFT_LEFT, NONE);
  _(HLCD_SHIFT_RIGHT, NONE);
  _(HLCD_HOME, NONE);
  _(HLCD_WRITE, READWRITE);
  _(HLCD_READ, READWRITE);
  _(HLCD_REDRAW, WRITE);
  _(HLCD_WRITE_INST, WRITE);
  _(HLCD_WRITE_DATA, WRITE);
  _(HLCD_GET_INFO, READ);
  _(HLCD_GET_CHIPNO, READ);
  _(HLCD_SET_CHIPNO, WRITE);
  /* Entries from file: dev/ic/icp_ioctl.h */
  _(GDT_IOCTL_GENERAL, READWRITE);
  _(GDT_IOCTL_DRVERS, READ);
  _(GDT_IOCTL_CTRTYPE, READWRITE);
  _(GDT_IOCTL_OSVERS, READ);
  _(GDT_IOCTL_CTRCNT, READ);
  _(GDT_IOCTL_EVENT, READWRITE);
  _(GDT_IOCTL_STATIST, READ);
  _(GDT_IOCTL_RESCAN, READWRITE);
  /* Entries from file: dev/ic/isp_ioctl.h */
  _(ISP_SDBLEV, READWRITE);
  _(ISP_RESETHBA, NONE);
  _(ISP_RESCAN, NONE);
  _(ISP_SETROLE, READWRITE);
  _(ISP_GETROLE, READ);
  _(ISP_GET_STATS, READ);
  _(ISP_CLR_STATS, NONE);
  _(ISP_FC_LIP, NONE);
  _(ISP_FC_GETDINFO, READWRITE);
  _(ISP_GET_FW_CRASH_DUMP, NONE);
  _(ISP_FORCE_CRASH_DUMP, NONE);
  _(ISP_FC_GETHINFO, READWRITE);
  _(ISP_TSK_MGMT, READWRITE);
  _(ISP_FC_GETDLIST, NONE);
  /* Entries from file: dev/ic/mlxio.h */
  _(MLXD_STATUS, READ);
  _(MLXD_CHECKASYNC, READ);
  _(MLXD_DETACH, WRITE);
  _(MLX_RESCAN_DRIVES, NONE);
  _(MLX_PAUSE_CHANNEL, WRITE);
  _(MLX_COMMAND, READWRITE);
  _(MLX_REBUILDASYNC, READWRITE);
  _(MLX_REBUILDSTAT, READ);
  _(MLX_GET_SYSDRIVE, READWRITE);
  _(MLX_GET_CINFO, READ);
  /* Entries from file: dev/ic/nvmeio.h */
  _(NVME_PASSTHROUGH_CMD, READWRITE);
  /* Entries from file: dev/ir/irdaio.h */
  _(IRDA_RESET_PARAMS, NONE);
  _(IRDA_SET_PARAMS, WRITE);
  _(IRDA_GET_SPEEDMASK, READ);
  _(IRDA_GET_TURNAROUNDMASK, READ);
  _(IRFRAMETTY_GET_DEVICE, READ);
  _(IRFRAMETTY_GET_DONGLE, READ);
  _(IRFRAMETTY_SET_DONGLE, WRITE);
  /* Entries from file: dev/isa/satlinkio.h */
  _(SATIORESET, NONE);
  _(SATIOGID, READ);
  _(SATIOSBUFSIZE, WRITE);
  /* Entries from file: dev/isa/isvio.h */
  _(ISV_CMD, READWRITE);
  /* Entries from file: dev/isa/wtreg.h */
  _(WTQICMD, NONE);
  /* Entries from file: dev/iscsi/iscsi_ioctl.h */
  _(ISCSI_GET_VERSION, READWRITE);
  _(ISCSI_LOGIN, READWRITE);
  _(ISCSI_LOGOUT, READWRITE);
  _(ISCSI_ADD_CONNECTION, READWRITE);
  _(ISCSI_RESTORE_CONNECTION, READWRITE);
  _(ISCSI_REMOVE_CONNECTION, READWRITE);
  _(ISCSI_CONNECTION_STATUS, READWRITE);
  _(ISCSI_SEND_TARGETS, READWRITE);
  _(ISCSI_SET_NODE_NAME, READWRITE);
  _(ISCSI_IO_COMMAND, READWRITE);
  _(ISCSI_REGISTER_EVENT, READWRITE);
  _(ISCSI_DEREGISTER_EVENT, READWRITE);
  _(ISCSI_WAIT_EVENT, READWRITE);
  _(ISCSI_POLL_EVENT, READWRITE);
  /* Entries from file: dev/ofw/openfirmio.h */
  _(OFIOCGET, READWRITE);
  _(OFIOCSET, WRITE);
  _(OFIOCNEXTPROP, READWRITE);
  _(OFIOCGETOPTNODE, READ);
  _(OFIOCGETNEXT, READWRITE);
  _(OFIOCGETCHILD, READWRITE);
  _(OFIOCFINDDEVICE, READWRITE);
  /* Entries from file: dev/pci/amrio.h */
  _(AMR_IO_VERSION, READ);
  _(AMR_IO_COMMAND, READWRITE);
  /* Entries from file: dev/pci/mlyio.h */
  _(MLYIO_COMMAND, READWRITE);
  _(MLYIO_HEALTH, WRITE);
  /* Entries from file: dev/pci/pciio.h */
  _(PCI_IOC_CFGREAD, READWRITE);
  _(PCI_IOC_CFGWRITE, WRITE);
  _(PCI_IOC_BDF_CFGREAD, READWRITE);
  _(PCI_IOC_BDF_CFGWRITE, WRITE);
  _(PCI_IOC_BUSINFO, READ);
  _(PCI_IOC_DRVNAME, READWRITE);
  _(PCI_IOC_DRVNAMEONBUS, READWRITE);
  /* Entries from file: dev/pci/tweio.h */
  _(TWEIO_COMMAND, READWRITE);
  _(TWEIO_STATS, READWRITE);
  _(TWEIO_AEN_POLL, READ);
  _(TWEIO_AEN_WAIT, READ);
  _(TWEIO_SET_PARAM, WRITE);
  _(TWEIO_GET_PARAM, WRITE);
  _(TWEIO_RESET, NONE);
  _(TWEIO_ADD_UNIT, WRITE);
  _(TWEIO_DEL_UNIT, WRITE);
  /* Entries from file: dev/pcmcia/if_cnwioctl.h */
  _(SIOCSCNWDOMAIN, WRITE);
  _(SIOCGCNWDOMAIN, READWRITE);
  _(SIOCSCNWKEY, READWRITE);
  _(SIOCGCNWSTATUS, READWRITE);
  _(SIOCGCNWSTATS, READWRITE);
  _(SIOCGCNWTRAIL, READWRITE);
  /* Entries from file: dev/pcmcia/if_rayreg.h */
  _(SIOCGRAYSIGLEV, READWRITE);
  /* Entries from file: dev/raidframe/raidframeio.h */
  _(RAIDFRAME_SHUTDOWN, NONE);
  _(RAIDFRAME_TUR, WRITE);
  _(RAIDFRAME_TEST_ACC, READWRITE);
  _(RAIDFRAME_FAIL_DISK, WRITE);
  _(RAIDFRAME_CHECK_RECON_STATUS, READWRITE);
  _(RAIDFRAME_REWRITEPARITY, NONE);
  _(RAIDFRAME_COPYBACK, NONE);
  _(RAIDFRAME_SPARET_WAIT, READ);
  _(RAIDFRAME_SEND_SPARET, WRITE);
  _(RAIDFRAME_ABORT_SPARET_WAIT, NONE);
  _(RAIDFRAME_START_ATRACE, NONE);
  _(RAIDFRAME_STOP_ATRACE, NONE);
  _(RAIDFRAME_GET_SIZE, READ);
  _(RAIDFRAME_RESET_ACCTOTALS, NONE);
  _(RAIDFRAME_GET_ACCTOTALS, READ);
  _(RAIDFRAME_KEEP_ACCTOTALS, WRITE);
  _(RAIDFRAME_GET_COMPONENT_LABEL, READWRITE);
  _(RAIDFRAME_SET_COMPONENT_LABEL, WRITE);
  _(RAIDFRAME_INIT_LABELS, WRITE);
  _(RAIDFRAME_ADD_HOT_SPARE, WRITE);
  _(RAIDFRAME_REMOVE_HOT_SPARE, WRITE);
  _(RAIDFRAME_REBUILD_IN_PLACE, WRITE);
  _(RAIDFRAME_CHECK_PARITY, READWRITE);
  _(RAIDFRAME_CHECK_PARITYREWRITE_STATUS, READWRITE);
  _(RAIDFRAME_CHECK_COPYBACK_STATUS, READWRITE);
  _(RAIDFRAME_SET_AUTOCONFIG, READWRITE);
  _(RAIDFRAME_SET_ROOT, READWRITE);
  _(RAIDFRAME_DELETE_COMPONENT, WRITE);
  _(RAIDFRAME_INCORPORATE_HOT_SPARE, WRITE);
  _(RAIDFRAME_CHECK_RECON_STATUS_EXT, READWRITE);
  _(RAIDFRAME_CHECK_PARITYREWRITE_STATUS_EXT, READWRITE);
  _(RAIDFRAME_CHECK_COPYBACK_STATUS_EXT, READWRITE);
  _(RAIDFRAME_CONFIGURE, WRITE);
  _(RAIDFRAME_GET_INFO, READWRITE);
  _(RAIDFRAME_PARITYMAP_STATUS, READ);
  _(RAIDFRAME_PARITYMAP_GET_DISABLE, READ);
  _(RAIDFRAME_PARITYMAP_SET_DISABLE, WRITE);
  _(RAIDFRAME_PARITYMAP_SET_PARAMS, WRITE);
  _(RAIDFRAME_SET_LAST_UNIT, WRITE);
  /* Entries from file: dev/sbus/mbppio.h */
  _(MBPPIOCSPARAM, WRITE);
  _(MBPPIOCGPARAM, READ);
  _(MBPPIOCGSTAT, READ);
  /* Entries from file: dev/scsipi/ses.h */
  _(SESIOC_GETNOBJ, NONE);
  _(SESIOC_GETOBJMAP, NONE);
  _(SESIOC_GETENCSTAT, NONE);
  _(SESIOC_SETENCSTAT, NONE);
  _(SESIOC_GETOBJSTAT, NONE);
  _(SESIOC_SETOBJSTAT, NONE);
  _(SESIOC_GETTEXT, NONE);
  _(SESIOC_INIT, NONE);
  /* Entries from file: dev/sun/disklabel.h */
  _(SUN_DKIOCGGEOM, READ);
  _(SUN_DKIOCINFO, READ);
  _(SUN_DKIOCGPART, READ);
  /* Entries from file: dev/sun/fbio.h */
  _(FBIOGTYPE, READ);
  _(FBIOGINFO, READ);
  _(FBIOPUTCMAP, WRITE);
  _(FBIOGETCMAP, WRITE);
  _(FBIOSATTR, WRITE);
  _(FBIOGATTR, READ);
  _(FBIOSVIDEO, WRITE);
  _(FBIOGVIDEO, READ);
  _(FBIOSCURSOR, WRITE);
  _(FBIOGCURSOR, READWRITE);
  _(FBIOSCURPOS, WRITE);
  _(FBIOGCURPOS, WRITE);
  _(FBIOGCURMAX, READ);
  /* Entries from file: dev/sun/kbio.h */
  _(KIOCTRANS, WRITE);
  _(KIOCSETKEY, READWRITE);
  _(KIOCGETKEY, READWRITE);
  _(KIOCGTRANS, READ);
  _(KIOCCMD, WRITE);
  _(KIOCTYPE, READ);
  _(KIOCSDIRECT, WRITE);
  _(KIOCSKEY, WRITE);
  _(KIOCGKEY, READWRITE);
  _(KIOCSLED, WRITE);
  _(KIOCGLED, READ);
  _(KIOCLAYOUT, READ);
  /* Entries from file: dev/sun/vuid_event.h */
  _(VUIDSFORMAT, WRITE);
  _(VUIDGFORMAT, READ);
  /* Entries from file: dev/tc/sticio.h */
  _(STICIO_GXINFO, READ);
  _(STICIO_RESET, NONE);
  _(STICIO_STARTQ, NONE);
  _(STICIO_STOPQ, NONE);
  /* Entries from file: dev/usb/ukyopon.h */
  _(UKYOPON_IDENTIFY, READ);
  /* Entries from file: dev/usb/urio.h */
  _(URIO_SEND_COMMAND, READWRITE);
  _(URIO_RECV_COMMAND, READWRITE);
  /* Entries from file: dev/usb/usb.h */
  _(USB_REQUEST, READWRITE);
  _(USB_SETDEBUG, WRITE);
  _(USB_DISCOVER, NONE);
  _(USB_DEVICEINFO, READWRITE);
  _(USB_DEVICEINFO_OLD, READWRITE);
  _(USB_DEVICESTATS, READ);
  _(USB_GET_REPORT_DESC, READ);
  _(USB_SET_IMMED, WRITE);
  _(USB_GET_REPORT, READWRITE);
  _(USB_SET_REPORT, WRITE);
  _(USB_GET_REPORT_ID, READ);
  _(USB_GET_CONFIG, READ);
  _(USB_SET_CONFIG, WRITE);
  _(USB_GET_ALTINTERFACE, READWRITE);
  _(USB_SET_ALTINTERFACE, READWRITE);
  _(USB_GET_NO_ALT, READWRITE);
  _(USB_GET_DEVICE_DESC, READ);
  _(USB_GET_CONFIG_DESC, READWRITE);
  _(USB_GET_INTERFACE_DESC, READWRITE);
  _(USB_GET_ENDPOINT_DESC, READWRITE);
  _(USB_GET_FULL_DESC, READWRITE);
  _(USB_GET_STRING_DESC, READWRITE);
  _(USB_DO_REQUEST, READWRITE);
  _(USB_GET_DEVICEINFO, READ);
  _(USB_GET_DEVICEINFO_OLD, READ);
  _(USB_SET_SHORT_XFER, WRITE);
  _(USB_SET_TIMEOUT, WRITE);
  _(USB_SET_BULK_RA, WRITE);
  _(USB_SET_BULK_WB, WRITE);
  _(USB_SET_BULK_RA_OPT, WRITE);
  _(USB_SET_BULK_WB_OPT, WRITE);
  _(USB_GET_CM_OVER_DATA, READ);
  _(USB_SET_CM_OVER_DATA, WRITE);
  /* Entries from file: dev/usb/utoppy.h */
  _(UTOPPYIOTURBO, WRITE);
  _(UTOPPYIOCANCEL, NONE);
  _(UTOPPYIOREBOOT, NONE);
  _(UTOPPYIOSTATS, READ);
  _(UTOPPYIORENAME, WRITE);
  _(UTOPPYIOMKDIR, WRITE);
  _(UTOPPYIODELETE, WRITE);
  _(UTOPPYIOREADDIR, WRITE);
  _(UTOPPYIOREADFILE, WRITE);
  _(UTOPPYIOWRITEFILE, WRITE);
  /* Entries from file: dev/vme/xio.h */
  _(DIOSXDCMD, READWRITE);
  /* Entries from file: dev/wscons/wsdisplay_usl_io.h */
  _(VT_OPENQRY, READ);
  _(VT_SETMODE, WRITE);
  _(VT_GETMODE, READ);
  _(VT_RELDISP, NONE);
  _(VT_ACTIVATE, NONE);
  _(VT_WAITACTIVE, NONE);
  _(VT_GETACTIVE, READ);
  _(VT_GETSTATE, READ);
  _(KDGETKBENT, READWRITE);
  _(KDGKBMODE, READ);
  _(KDSKBMODE, NONE);
  _(KDMKTONE, NONE);
  _(KDSETMODE, NONE);
  _(KDENABIO, NONE);
  _(KDDISABIO, NONE);
  _(KDGKBTYPE, READ);
  _(KDGETLED, READ);
  _(KDSETLED, NONE);
  _(KDSETRAD, NONE);
  _(VGAPCVTID, READWRITE);
  _(CONS_GETVERS, READ);
  /* Entries from file: dev/wscons/wsconsio.h */
  _(WSKBDIO_GTYPE, READ);
  _(WSKBDIO_BELL, NONE);
  _(WSKBDIO_COMPLEXBELL, WRITE);
  _(WSKBDIO_SETBELL, WRITE);
  _(WSKBDIO_GETBELL, READ);
  _(WSKBDIO_SETDEFAULTBELL, WRITE);
  _(WSKBDIO_GETDEFAULTBELL, READ);
  _(WSKBDIO_SETKEYREPEAT, WRITE);
  _(WSKBDIO_GETKEYREPEAT, READ);
  _(WSKBDIO_SETDEFAULTKEYREPEAT, WRITE);
  _(WSKBDIO_GETDEFAULTKEYREPEAT, READ);
  _(WSKBDIO_SETLEDS, WRITE);
  _(WSKBDIO_GETLEDS, READ);
  _(WSKBDIO_GETMAP, READWRITE);
  _(WSKBDIO_SETMAP, WRITE);
  _(WSKBDIO_GETENCODING, READ);
  _(WSKBDIO_SETENCODING, WRITE);
  _(WSKBDIO_SETMODE, WRITE);
  _(WSKBDIO_GETMODE, READ);
  _(WSKBDIO_SETKEYCLICK, WRITE);
  _(WSKBDIO_GETKEYCLICK, READ);
  _(WSKBDIO_GETSCROLL, READ);
  _(WSKBDIO_SETSCROLL, WRITE);
  _(WSKBDIO_SETVERSION, WRITE);
  _(WSMOUSEIO_GTYPE, READ);
  _(WSMOUSEIO_SRES, WRITE);
  _(WSMOUSEIO_SSCALE, WRITE);
  _(WSMOUSEIO_SRATE, WRITE);
  _(WSMOUSEIO_SCALIBCOORDS, WRITE);
  _(WSMOUSEIO_GCALIBCOORDS, READ);
  _(WSMOUSEIO_GETID, READWRITE);
  _(WSMOUSEIO_GETREPEAT, READ);
  _(WSMOUSEIO_SETREPEAT, WRITE);
  _(WSMOUSEIO_SETVERSION, WRITE);
  _(WSDISPLAYIO_GTYPE, READ);
  _(WSDISPLAYIO_GINFO, READ);
  _(WSDISPLAYIO_GETCMAP, WRITE);
  _(WSDISPLAYIO_PUTCMAP, WRITE);
  _(WSDISPLAYIO_GVIDEO, READ);
  _(WSDISPLAYIO_SVIDEO, WRITE);
  _(WSDISPLAYIO_GCURPOS, READ);
  _(WSDISPLAYIO_SCURPOS, WRITE);
  _(WSDISPLAYIO_GCURMAX, READ);
  _(WSDISPLAYIO_GCURSOR, READWRITE);
  _(WSDISPLAYIO_SCURSOR, WRITE);
  _(WSDISPLAYIO_GMODE, READ);
  _(WSDISPLAYIO_SMODE, WRITE);
  _(WSDISPLAYIO_LDFONT, WRITE);
  _(WSDISPLAYIO_ADDSCREEN, WRITE);
  _(WSDISPLAYIO_DELSCREEN, WRITE);
  _(WSDISPLAYIO_SFONT, WRITE);
  _(_O_WSDISPLAYIO_SETKEYBOARD, READWRITE);
  _(WSDISPLAYIO_GETPARAM, READWRITE);
  _(WSDISPLAYIO_SETPARAM, READWRITE);
  _(WSDISPLAYIO_GETACTIVESCREEN, READ);
  _(WSDISPLAYIO_GETWSCHAR, READWRITE);
  _(WSDISPLAYIO_PUTWSCHAR, READWRITE);
  _(WSDISPLAYIO_DGSCROLL, READ);
  _(WSDISPLAYIO_DSSCROLL, WRITE);
  _(WSDISPLAYIO_GMSGATTRS, READ);
  _(WSDISPLAYIO_SMSGATTRS, WRITE);
  _(WSDISPLAYIO_GBORDER, READ);
  _(WSDISPLAYIO_SBORDER, WRITE);
  _(WSDISPLAYIO_SSPLASH, WRITE);
  _(WSDISPLAYIO_SPROGRESS, WRITE);
  _(WSDISPLAYIO_LINEBYTES, READ);
  _(WSDISPLAYIO_SETVERSION, WRITE);
  _(WSMUXIO_ADD_DEVICE, WRITE);
  _(WSMUXIO_REMOVE_DEVICE, WRITE);
  _(WSMUXIO_LIST_DEVICES, READWRITE);
  _(WSMUXIO_INJECTEVENT, WRITE);
  _(WSDISPLAYIO_GET_BUSID, READ);
  _(WSDISPLAYIO_GET_EDID, READWRITE);
  _(WSDISPLAYIO_SET_POLLING, WRITE);
  _(WSDISPLAYIO_GET_FBINFO, READWRITE);
  _(WSDISPLAYIO_DOBLIT, READWRITE);
  _(WSDISPLAYIO_WAITBLIT, READWRITE);
  /* Entries from file: dev/biovar.h */
  _(BIOCLOCATE, READWRITE);
  _(BIOCINQ, READWRITE);
  _(BIOCDISK_NOVOL, READWRITE);
  _(BIOCDISK, READWRITE);
  _(OBIOCDISK, READWRITE);
  _(BIOCVOL, READWRITE);
  _(OBIOCVOL, READWRITE);
  _(BIOCALARM, READWRITE);
  _(BIOCBLINK, READWRITE);
  _(BIOCSETSTATE, READWRITE);
  _(BIOCVOLOPS, READWRITE);
  /* Entries from file: dev/md.h */
  _(MD_GETCONF, READ);
  _(MD_SETCONF, WRITE);
  /* Entries from file: dev/ccdvar.h */
  _(CCDIOCSET, READWRITE);
  _(CCDIOCCLR, WRITE);
  /* Entries from file: dev/cgdvar.h */
  _(CGDIOCSET, READWRITE);
  _(CGDIOCCLR, WRITE);
  _(CGDIOCGET, READWRITE);
  /* Entries from file: dev/fssvar.h */
  _(FSSIOCSET, WRITE);
  _(FSSIOCGET, READ);
  _(FSSIOCCLR, NONE);
  _(FSSIOFSET, WRITE);
  _(FSSIOFGET, READ);
  /* Entries from file: dev/bluetooth/btdev.h */
  _(BTDEV_ATTACH, WRITE);
  _(BTDEV_DETACH, WRITE);
  /* Entries from file: dev/bluetooth/btsco.h */
  _(BTSCO_GETINFO, READ);
  /* Entries from file: dev/kttcpio.h */
  _(KTTCP_IO_SEND, READWRITE);
  _(KTTCP_IO_RECV, READWRITE);
  /* Entries from file: dev/lockstat.h */
  _(IOC_LOCKSTAT_GVERSION, READ);
  _(IOC_LOCKSTAT_ENABLE, WRITE);
  _(IOC_LOCKSTAT_DISABLE, READ);
  /* Entries from file: dev/vndvar.h */
  _(VNDIOCSET, READWRITE);
  _(VNDIOCCLR, WRITE);
  _(VNDIOCGET, READWRITE);
  /* Entries from file: dev/spkrio.h */
  _(SPKRTONE, WRITE);
  _(SPKRTUNE, NONE);
  _(SPKRGETVOL, READ);
  _(SPKRSETVOL, WRITE);
  /* Entries from file: net/bpf.h */
  _(BIOCGBLEN, READ);
  _(BIOCSBLEN, READWRITE);
  _(BIOCSETF, WRITE);
  _(BIOCFLUSH, NONE);
  _(BIOCPROMISC, NONE);
  _(BIOCGDLT, READ);
  _(BIOCGETIF, READ);
  _(BIOCSETIF, WRITE);
  _(BIOCSORTIMEOUT, WRITE);
  _(BIOCGORTIMEOUT, READ);
  _(BIOCGSTATS, READ);
  _(BIOCGSTATSOLD, READ);
  _(BIOCIMMEDIATE, WRITE);
  _(BIOCVERSION, READ);
  _(BIOCSTCPF, WRITE);
  _(BIOCSUDPF, WRITE);
  _(BIOCGHDRCMPLT, READ);
  _(BIOCSHDRCMPLT, WRITE);
  _(BIOCSDLT, WRITE);
  _(BIOCGDLTLIST, READWRITE);
  _(BIOCGSEESENT, READ);
  _(BIOCSSEESENT, WRITE);
  _(BIOCSRTIMEOUT, WRITE);
  _(BIOCGRTIMEOUT, READ);
  _(BIOCGFEEDBACK, READ);
  _(BIOCSFEEDBACK, WRITE);
  /* Entries from file: net/if_atm.h */
  _(SIOCRAWATM, READWRITE);
  _(SIOCATMENA, READWRITE);
  _(SIOCATMDIS, READWRITE);
  _(SIOCSPVCTX, READWRITE);
  _(SIOCGPVCTX, READWRITE);
  _(SIOCSPVCSIF, READWRITE);
  _(SIOCGPVCSIF, READWRITE);
  /* Entries from file: net/if_gre.h */
  _(GRESADDRS, WRITE);
  _(GRESADDRD, WRITE);
  _(GREGADDRS, READWRITE);
  _(GREGADDRD, READWRITE);
  _(GRESPROTO, WRITE);
  _(GREGPROTO, READWRITE);
  _(GRESSOCK, WRITE);
  _(GREDSOCK, WRITE);
  /* Entries from file: net/if_ppp.h */
  _(PPPIOCGRAWIN, READ);
  _(PPPIOCGFLAGS, READ);
  _(PPPIOCSFLAGS, WRITE);
  _(PPPIOCGASYNCMAP, READ);
  _(PPPIOCSASYNCMAP, WRITE);
  _(PPPIOCGUNIT, READ);
  _(PPPIOCGRASYNCMAP, READ);
  _(PPPIOCSRASYNCMAP, WRITE);
  _(PPPIOCGMRU, READ);
  _(PPPIOCSMRU, WRITE);
  _(PPPIOCSMAXCID, WRITE);
  _(PPPIOCGXASYNCMAP, READ);
  _(PPPIOCSXASYNCMAP, WRITE);
  _(PPPIOCXFERUNIT, NONE);
  _(PPPIOCSCOMPRESS, WRITE);
  _(PPPIOCGNPMODE, READWRITE);
  _(PPPIOCSNPMODE, WRITE);
  _(PPPIOCGIDLE, READ);
  _(PPPIOCSPASS, WRITE);
  _(PPPIOCSACTIVE, WRITE);
  _(PPPIOCSIPASS, WRITE);
  _(PPPIOCSOPASS, WRITE);
  _(PPPIOCSIACTIVE, WRITE);
  _(PPPIOCSOACTIVE, WRITE);
  _(PPPIOCGMTU, READ);
  _(PPPIOCSMTU, WRITE);
  _(SIOCGPPPSTATS, READWRITE);
  _(SIOCGPPPCSTATS, READWRITE);
  /* Entries from file: net/npf.h */
  _(IOC_NPF_VERSION, READ);
  _(IOC_NPF_SWITCH, WRITE);
  _(IOC_NPF_LOAD, READWRITE);
  _(IOC_NPF_TABLE, WRITE);
  _(IOC_NPF_STATS, WRITE);
  _(IOC_NPF_SAVE, READ);
  _(IOC_NPF_RULE, READWRITE);
  _(IOC_NPF_CONN_LOOKUP, READWRITE);
  /* Entries from file: net/if_pppoe.h */
  _(PPPOESETPARMS, WRITE);
  _(PPPOEGETPARMS, READWRITE);
  _(PPPOEGETSESSION, READWRITE);
  /* Entries from file: net/if_sppp.h */
  _(SPPPGETAUTHCFG, READWRITE);
  _(SPPPSETAUTHCFG, WRITE);
  _(SPPPGETLCPCFG, READWRITE);
  _(SPPPSETLCPCFG, WRITE);
  _(SPPPGETSTATUS, READWRITE);
  _(SPPPGETSTATUSNCP, READWRITE);
  _(SPPPGETIDLETO, READWRITE);
  _(SPPPSETIDLETO, WRITE);
  _(SPPPGETAUTHFAILURES, READWRITE);
  _(SPPPSETAUTHFAILURE, WRITE);
  _(SPPPSETDNSOPTS, WRITE);
  _(SPPPGETDNSOPTS, READWRITE);
  _(SPPPGETDNSADDRS, READWRITE);
  _(SPPPSETKEEPALIVE, WRITE);
  _(SPPPGETKEEPALIVE, READWRITE);
  /* Entries from file: net/if_srt.h */
  _(SRT_GETNRT, READ);
  _(SRT_GETRT, READWRITE);
  _(SRT_SETRT, WRITE);
  _(SRT_DELRT, WRITE);
  _(SRT_SFLAGS, WRITE);
  _(SRT_GFLAGS, READ);
  _(SRT_SGFLAGS, READWRITE);
  _(SRT_DEBUG, WRITE);
  /* Entries from file: net/if_tap.h */
  _(TAPGIFNAME, READ);
  /* Entries from file: net/if_tun.h */
  _(TUNSDEBUG, WRITE);
  _(TUNGDEBUG, READ);
  _(TUNSIFMODE, WRITE);
  _(TUNSLMODE, WRITE);
  _(TUNSIFHEAD, WRITE);
  _(TUNGIFHEAD, READ);
  /* Entries from file: net/pfvar.h */
  _(DIOCSTART, NONE);
  _(DIOCSTOP, NONE);
  _(DIOCADDRULE, READWRITE);
  _(DIOCGETRULES, READWRITE);
  _(DIOCGETRULE, READWRITE);
  _(DIOCSETLCK, READWRITE);
  _(DIOCCLRSTATES, READWRITE);
  _(DIOCGETSTATE, READWRITE);
  _(DIOCSETSTATUSIF, READWRITE);
  _(DIOCGETSTATUS, READWRITE);
  _(DIOCCLRSTATUS, NONE);
  _(DIOCNATLOOK, READWRITE);
  _(DIOCSETDEBUG, READWRITE);
  _(DIOCGETSTATES, READWRITE);
  _(DIOCCHANGERULE, READWRITE);
  _(DIOCSETTIMEOUT, READWRITE);
  _(DIOCGETTIMEOUT, READWRITE);
  _(DIOCADDSTATE, READWRITE);
  _(DIOCCLRRULECTRS, NONE);
  _(DIOCGETLIMIT, READWRITE);
  _(DIOCSETLIMIT, READWRITE);
  _(DIOCKILLSTATES, READWRITE);
  _(DIOCSTARTALTQ, NONE);
  _(DIOCSTOPALTQ, NONE);
  _(DIOCADDALTQ, READWRITE);
  _(DIOCGETALTQS, READWRITE);
  _(DIOCGETALTQ, READWRITE);
  _(DIOCCHANGEALTQ, READWRITE);
  _(DIOCGETQSTATS, READWRITE);
  _(DIOCBEGINADDRS, READWRITE);
  _(DIOCADDADDR, READWRITE);
  _(DIOCGETADDRS, READWRITE);
  _(DIOCGETADDR, READWRITE);
  _(DIOCCHANGEADDR, READWRITE);
  _(DIOCADDSTATES, READWRITE);
  _(DIOCGETRULESETS, READWRITE);
  _(DIOCGETRULESET, READWRITE);
  _(DIOCRCLRTABLES, READWRITE);
  _(DIOCRADDTABLES, READWRITE);
  _(DIOCRDELTABLES, READWRITE);
  _(DIOCRGETTABLES, READWRITE);
  _(DIOCRGETTSTATS, READWRITE);
  _(DIOCRCLRTSTATS, READWRITE);
  _(DIOCRCLRADDRS, READWRITE);
  _(DIOCRADDADDRS, READWRITE);
  _(DIOCRDELADDRS, READWRITE);
  _(DIOCRSETADDRS, READWRITE);
  _(DIOCRGETADDRS, READWRITE);
  _(DIOCRGETASTATS, READWRITE);
  _(DIOCRCLRASTATS, READWRITE);
  _(DIOCRTSTADDRS, READWRITE);
  _(DIOCRSETTFLAGS, READWRITE);
  _(DIOCRINADEFINE, READWRITE);
  _(DIOCOSFPFLUSH, NONE);
  _(DIOCOSFPADD, READWRITE);
  _(DIOCOSFPGET, READWRITE);
  _(DIOCXBEGIN, READWRITE);
  _(DIOCXCOMMIT, READWRITE);
  _(DIOCXROLLBACK, READWRITE);
  _(DIOCGETSRCNODES, READWRITE);
  _(DIOCCLRSRCNODES, NONE);
  _(DIOCSETHOSTID, READWRITE);
  _(DIOCIGETIFACES, READWRITE);
  _(DIOCSETIFFLAG, READWRITE);
  _(DIOCCLRIFFLAG, READWRITE);
  _(DIOCKILLSRCNODES, READWRITE);
  /* Entries from file: net/slip.h */
  _(SLIOCGUNIT, READ);
  /* Entries from file: netbt/hci.h */
  _(SIOCGBTINFO, READWRITE);
  _(SIOCGBTINFOA, READWRITE);
  _(SIOCNBTINFO, READWRITE);
  _(SIOCSBTFLAGS, READWRITE);
  _(SIOCSBTPOLICY, READWRITE);
  _(SIOCSBTPTYPE, READWRITE);
  _(SIOCGBTSTATS, READWRITE);
  _(SIOCZBTSTATS, READWRITE);
  _(SIOCBTDUMP, WRITE);
  _(SIOCSBTSCOMTU, READWRITE);
  _(SIOCGBTFEAT, READWRITE);
  /* Entries from file: netinet/ip_nat.h */
  _(SIOCADNAT, WRITE);
  _(SIOCRMNAT, WRITE);
  _(SIOCGNATS, READWRITE);
  _(SIOCGNATL, READWRITE);
  _(SIOCPURGENAT, READWRITE);
  _(SIOCADNAT, WRITE);
  _(SIOCRMNAT, WRITE);
  _(SIOCGNATS, READWRITE);
  _(SIOCGNATL, READWRITE);
  _(SIOCPURGENAT, READWRITE);
  /* Entries from file: netinet/ip_proxy.h */
  _(SIOCPROXY, READWRITE);
  _(SIOCPROXY, READWRITE);
  /* Entries from file: netinet6/in6_var.h */
  _(SIOCSIFINFO_FLAGS, READWRITE);
  _(SIOCAADDRCTL_POLICY, WRITE);
  _(SIOCDADDRCTL_POLICY, WRITE);
  /* Entries from file: netnatm/natm.h */
  _(SIOCXRAWATM, READWRITE);
  /* Entries from file: netsmb/smb_dev.h */
  _(SMBIOC_OPENSESSION, WRITE);
  _(SMBIOC_OPENSHARE, WRITE);
  _(SMBIOC_REQUEST, READWRITE);
  _(SMBIOC_SETFLAGS, WRITE);
  _(SMBIOC_LOOKUP, WRITE);
  _(SMBIOC_READ, READWRITE);
  _(SMBIOC_WRITE, READWRITE);
  /* Entries from file: sys/agpio.h */
  _(AGPIOC_INFO, READ);
  _(AGPIOC_ACQUIRE, NONE);
  _(AGPIOC_RELEASE, NONE);
  _(AGPIOC_SETUP, WRITE);
  _(AGPIOC_RESERVE, WRITE);
  _(AGPIOC_PROTECT, WRITE);
  _(AGPIOC_ALLOCATE, READWRITE);
  _(AGPIOC_DEALLOCATE, WRITE);
  _(AGPIOC_BIND, WRITE);
  _(AGPIOC_UNBIND, WRITE);
  /* Entries from file: sys/audioio.h */
  _(AUDIO_GETINFO, READ);
  _(AUDIO_SETINFO, READWRITE);
  _(AUDIO_DRAIN, NONE);
  _(AUDIO_FLUSH, NONE);
  _(AUDIO_WSEEK, READ);
  _(AUDIO_RERROR, READ);
  _(AUDIO_GETDEV, READ);
  _(AUDIO_GETENC, READWRITE);
  _(AUDIO_GETFD, READ);
  _(AUDIO_SETFD, READWRITE);
  _(AUDIO_PERROR, READ);
  _(AUDIO_GETIOFFS, READ);
  _(AUDIO_GETOOFFS, READ);
  _(AUDIO_GETPROPS, READ);
  _(AUDIO_GETBUFINFO, READ);
  _(AUDIO_SETCHAN, WRITE);
  _(AUDIO_GETCHAN, READ);
  _(AUDIO_MIXER_READ, READWRITE);
  _(AUDIO_MIXER_WRITE, READWRITE);
  _(AUDIO_MIXER_DEVINFO, READWRITE);
  /* Entries from file: sys/ataio.h */
  _(ATAIOCCOMMAND, READWRITE);
  _(ATABUSIOSCAN, WRITE);
  _(ATABUSIORESET, NONE);
  _(ATABUSIODETACH, WRITE);
  /* Entries from file: sys/cdio.h */
  _(CDIOCPLAYTRACKS, WRITE);
  _(CDIOCPLAYBLOCKS, WRITE);
  _(CDIOCREADSUBCHANNEL, READWRITE);
  _(CDIOCREADSUBCHANNEL_BUF, READWRITE);
  _(CDIOREADTOCHEADER, READ);
  _(CDIOREADTOCENTRIES, READWRITE);
  _(CDIOREADTOCENTRIES_BUF, READWRITE);
  _(CDIOREADMSADDR, READWRITE);
  _(CDIOCSETPATCH, WRITE);
  _(CDIOCGETVOL, READ);
  _(CDIOCSETVOL, WRITE);
  _(CDIOCSETMONO, NONE);
  _(CDIOCSETSTEREO, NONE);
  _(CDIOCSETMUTE, NONE);
  _(CDIOCSETLEFT, NONE);
  _(CDIOCSETRIGHT, NONE);
  _(CDIOCSETDEBUG, NONE);
  _(CDIOCCLRDEBUG, NONE);
  _(CDIOCPAUSE, NONE);
  _(CDIOCRESUME, NONE);
  _(CDIOCRESET, NONE);
  _(CDIOCSTART, NONE);
  _(CDIOCSTOP, NONE);
  _(CDIOCEJECT, NONE);
  _(CDIOCALLOW, NONE);
  _(CDIOCPREVENT, NONE);
  _(CDIOCCLOSE, NONE);
  _(CDIOCPLAYMSF, WRITE);
  _(CDIOCLOADUNLOAD, WRITE);
  _(MMCGETDISCINFO, READ);
  _(MMCGETTRACKINFO, READWRITE);
  _(MMCOP, READWRITE);
  _(MMCSETUPWRITEPARAMS, WRITE);
  /* Entries from file: sys/chio.h */
  _(CHIOMOVE, WRITE);
  _(CHIOEXCHANGE, WRITE);
  _(CHIOPOSITION, WRITE);
  _(CHIOGPICKER, READ);
  _(CHIOSPICKER, WRITE);
  _(CHIOGPARAMS, READ);
  _(CHIOIELEM, NONE);
  _(OCHIOGSTATUS, WRITE);
  _(CHIOGSTATUS, WRITE);
  _(CHIOSVOLTAG, WRITE);
  /* Entries from file: sys/clockctl.h */
  _(CLOCKCTL_SETTIMEOFDAY, WRITE);
  _(CLOCKCTL_ADJTIME, READWRITE);
  _(CLOCKCTL_CLOCK_SETTIME, WRITE);
  _(CLOCKCTL_NTP_ADJTIME, READWRITE);
  /* Entries from file: sys/cpuio.h */
  _(IOC_CPU_SETSTATE, WRITE);
  _(IOC_CPU_GETSTATE, READWRITE);
  _(IOC_CPU_GETCOUNT, READ);
  _(IOC_CPU_MAPID, READWRITE);
  _(IOC_CPU_UCODE_GET_VERSION, READWRITE);
  _(IOC_CPU_UCODE_APPLY, WRITE);
  /* Entries from file: sys/dkio.h */
  _(DIOCGDINFO, READ);
  _(DIOCSDINFO, WRITE);
  _(DIOCWDINFO, WRITE);
  _(DIOCGPARTINFO, WRITE);
  _(ODIOCGDINFO, READ);
  _(ODIOCSDINFO, WRITE);
  _(ODIOCWDINFO, WRITE);
  _(DIOCRFORMAT, READWRITE);
  _(DIOCWFORMAT, READWRITE);
  _(DIOCSSTEP, WRITE);
  _(DIOCSRETRIES, WRITE);
  _(DIOCKLABEL, WRITE);
  _(DIOCWLABEL, WRITE);
  _(DIOCSBAD, WRITE);
  _(DIOCEJECT, WRITE);
  _(ODIOCEJECT, NONE);
  _(DIOCLOCK, WRITE);
  _(DIOCGDEFLABEL, READ);
  _(DIOCCLRLABEL, NONE);
  _(ODIOCGDEFLABEL, READ);
  _(DIOCGCACHE, READ);
  _(DIOCSCACHE, WRITE);
  _(DIOCCACHESYNC, WRITE);
  _(DIOCBSLIST, READWRITE);
  _(DIOCBSFLUSH, NONE);
  _(DIOCAWEDGE, READWRITE);
  _(DIOCGWEDGEINFO, READ);
  _(DIOCDWEDGE, WRITE);
  _(DIOCLWEDGES, READWRITE);
  _(DIOCGSTRATEGY, READ);
  _(DIOCSSTRATEGY, WRITE);
  _(DIOCGDISKINFO, READ);
  _(DIOCTUR, READ);
  _(DIOCMWEDGES, READ);
  _(DIOCGSECTORSIZE, READ);
  _(DIOCGMEDIASIZE, READ);
  /* Entries from file: sys/drvctlio.h */
  _(DRVDETACHDEV, WRITE);
  _(DRVRESCANBUS, WRITE);
  _(DRVCTLCOMMAND, READWRITE);
  _(DRVRESUMEDEV, WRITE);
  _(DRVLISTDEV, READWRITE);
  _(DRVGETEVENT, READ);
  _(DRVSUSPENDDEV, WRITE);
  /* Entries from file: sys/dvdio.h */
  _(DVD_READ_STRUCT, READWRITE);
  _(DVD_WRITE_STRUCT, READWRITE);
  _(DVD_AUTH, READWRITE);
  /* Entries from file: sys/envsys.h */
  _(ENVSYS_GETDICTIONARY, READWRITE);
  _(ENVSYS_SETDICTIONARY, READWRITE);
  _(ENVSYS_REMOVEPROPS, READWRITE);
  _(ENVSYS_GTREDATA, READWRITE);
  _(ENVSYS_GTREINFO, READWRITE);
  /* Entries from file: sys/event.h */
  _(KFILTER_BYFILTER, READWRITE);
  _(KFILTER_BYNAME, READWRITE);
  /* Entries from file: sys/fdio.h */
  _(FDIOCGETOPTS, READ);
  _(FDIOCSETOPTS, WRITE);
  _(FDIOCSETFORMAT, WRITE);
  _(FDIOCGETFORMAT, READ);
  _(FDIOCFORMAT_TRACK, WRITE);
  /* Entries from file: sys/filio.h */
  _(FIOCLEX, NONE);
  _(FIONCLEX, NONE);
  _(FIONREAD, READ);
  _(FIONBIO, WRITE);
  _(FIOASYNC, WRITE);
  _(FIOSETOWN, WRITE);
  _(FIOGETOWN, READ);
  _(OFIOGETBMAP, READWRITE);
  _(FIOGETBMAP, READWRITE);
  _(FIONWRITE, READ);
  _(FIONSPACE, READ);
  /* Entries from file: sys/gpio.h */
  _(GPIOINFO, READ);
  _(GPIOSET, READWRITE);
  _(GPIOUNSET, READWRITE);
  _(GPIOREAD, READWRITE);
  _(GPIOWRITE, READWRITE);
  _(GPIOTOGGLE, READWRITE);
  _(GPIOATTACH, READWRITE);
  _(GPIOPINREAD, READWRITE);
  _(GPIOPINWRITE, READWRITE);
  _(GPIOPINTOGGLE, READWRITE);
  _(GPIOPINCTL, READWRITE);
  _(GPIODETACH, READWRITE);
  /* Entries from file: sys/ioctl.h */
  _(PTIOCNETBSD, WRITE);
  _(PTIOCSUNOS, WRITE);
  _(PTIOCLINUX, WRITE);
  _(PTIOCFREEBSD, WRITE);
  _(PTIOCULTRIX, WRITE);
  /* Entries from file: sys/ioctl_compat.h */
  _(TIOCHPCL, NONE);
  _(TIOCGETP, READ);
  _(TIOCSETP, WRITE);
  _(TIOCSETN, WRITE);
  _(TIOCSETC, WRITE);
  _(TIOCGETC, READ);
  _(TIOCLBIS, WRITE);
  _(TIOCLBIC, WRITE);
  _(TIOCLSET, WRITE);
  _(TIOCLGET, READ);
  _(TIOCSLTC, WRITE);
  _(TIOCGLTC, READ);
  _(OTIOCCONS, NONE);
  /* Entries from file: sys/joystick.h */
  _(JOY_SETTIMEOUT, WRITE);
  _(JOY_GETTIMEOUT, READ);
  _(JOY_SET_X_OFFSET, WRITE);
  _(JOY_SET_Y_OFFSET, WRITE);
  _(JOY_GET_X_OFFSET, READ);
  _(JOY_GET_Y_OFFSET, READ);
  /* Entries from file: sys/ksyms.h */
  _(OKIOCGSYMBOL, WRITE);
  _(OKIOCGVALUE, WRITE);
  _(KIOCGSIZE, READ);
  _(KIOCGVALUE, READWRITE);
  _(KIOCGSYMBOL, READWRITE);
  /* Entries from file: sys/lua.h */
  _(LUAINFO, READWRITE);
  _(LUACREATE, READWRITE);
  _(LUADESTROY, READWRITE);
  _(LUAREQUIRE, READWRITE);
  _(LUALOAD, READWRITE);
  /* Entries from file: sys/midiio.h */
  _(MIDI_PRETIME, READWRITE);
  _(MIDI_MPUMODE, READWRITE);
  _(MIDI_MPUCMD, READWRITE);
  _(SEQUENCER_RESET, NONE);
  _(SEQUENCER_SYNC, NONE);
  _(SEQUENCER_INFO, READWRITE);
  _(SEQUENCER_CTRLRATE, READWRITE);
  _(SEQUENCER_GETOUTCOUNT, READ);
  _(SEQUENCER_GETINCOUNT, READ);
  _(SEQUENCER_PERCMODE, WRITE);
  _(SEQUENCER_TESTMIDI, WRITE);
  _(SEQUENCER_RESETSAMPLES, WRITE);
  _(SEQUENCER_NRSYNTHS, READ);
  _(SEQUENCER_NRMIDIS, READ);
  _(SEQUENCER_MIDI_INFO, READWRITE);
  _(SEQUENCER_THRESHOLD, WRITE);
  _(SEQUENCER_MEMAVL, READWRITE);
  _(SEQUENCER_PANIC, NONE);
  _(SEQUENCER_OUTOFBAND, WRITE);
  _(SEQUENCER_GETTIME, READ);
  _(SEQUENCER_ID, READWRITE);
  _(SEQUENCER_CONTROL, READWRITE);
  _(SEQUENCER_REMOVESAMPLE, READWRITE);
  _(SEQUENCER_TMR_TIMEBASE, READWRITE);
  _(SEQUENCER_TMR_START, NONE);
  _(SEQUENCER_TMR_STOP, NONE);
  _(SEQUENCER_TMR_CONTINUE, NONE);
  _(SEQUENCER_TMR_TEMPO, READWRITE);
  _(SEQUENCER_TMR_SOURCE, READWRITE);
  _(SEQUENCER_TMR_METRONOME, WRITE);
  _(SEQUENCER_TMR_SELECT, WRITE);
  /* Entries from file: sys/mtio.h */
  _(MTIOCTOP, WRITE);
  _(MTIOCGET, READ);
  _(MTIOCIEOT, NONE);
  _(MTIOCEEOT, NONE);
  _(MTIOCRDSPOS, READ);
  _(MTIOCRDHPOS, READ);
  _(MTIOCSLOCATE, WRITE);
  _(MTIOCHLOCATE, WRITE);
  /* Entries from file: sys/power.h */
  _(POWER_EVENT_RECVDICT, READWRITE);
  _(POWER_IOC_GET_TYPE, READ);
  _(POWER_IOC_GET_TYPE_WITH_LOSSAGE, READ);
  /* Entries from file: sys/radioio.h */
  _(RIOCGINFO, READ);
  _(RIOCSINFO, READWRITE);
  _(RIOCSSRCH, WRITE);
  /* Entries from file: sys/rndio.h */
  _(RNDGETENTCNT, READ);
  _(RNDGETSRCNUM, READWRITE);
  _(RNDGETSRCNAME, READWRITE);
  _(RNDCTL, WRITE);
  _(RNDADDDATA, WRITE);
  _(RNDGETPOOLSTAT, READ);
  _(RNDGETESTNUM, READWRITE);
  _(RNDGETESTNAME, READWRITE);
  /* Entries from file: sys/scanio.h */
  _(SCIOCGET, READ);
  _(SCIOCSET, WRITE);
  _(SCIOCRESTART, NONE);
  _(SCIOC_USE_ADF, NONE);
  /* Entries from file: sys/scsiio.h */
  _(SCIOCCOMMAND, READWRITE);
  _(SCIOCDEBUG, WRITE);
  _(SCIOCIDENTIFY, READ);
  _(OSCIOCIDENTIFY, READ);
  _(SCIOCDECONFIG, NONE);
  _(SCIOCRECONFIG, NONE);
  _(SCIOCRESET, NONE);
  _(SCBUSIOSCAN, WRITE);
  _(SCBUSIORESET, NONE);
  _(SCBUSIODETACH, WRITE);
  _(SCBUSACCEL, WRITE);
  _(SCBUSIOLLSCAN, NONE);
  /* Entries from file: sys/sockio.h */
  _(SIOCSHIWAT, WRITE);
  _(SIOCGHIWAT, READ);
  _(SIOCSLOWAT, WRITE);
  _(SIOCGLOWAT, READ);
  _(SIOCATMARK, READ);
  _(SIOCSPGRP, WRITE);
  _(SIOCGPGRP, READ);
  _(SIOCADDRT, WRITE);
  _(SIOCDELRT, WRITE);
  _(SIOCSIFADDR, WRITE);
  _(SIOCGIFADDR, READWRITE);
  _(SIOCSIFDSTADDR, WRITE);
  _(SIOCGIFDSTADDR, READWRITE);
  _(SIOCSIFFLAGS, WRITE);
  _(SIOCGIFFLAGS, READWRITE);
  _(SIOCGIFBRDADDR, READWRITE);
  _(SIOCSIFBRDADDR, WRITE);
  _(SIOCGIFCONF, READWRITE);
  _(SIOCGIFNETMASK, READWRITE);
  _(SIOCSIFNETMASK, WRITE);
  _(SIOCGIFMETRIC, READWRITE);
  _(SIOCSIFMETRIC, WRITE);
  _(SIOCDIFADDR, WRITE);
  _(SIOCAIFADDR, WRITE);
  _(SIOCGIFALIAS, READWRITE);
  _(SIOCGIFAFLAG_IN, READWRITE);
  _(SIOCALIFADDR, WRITE);
  _(SIOCGLIFADDR, READWRITE);
  _(SIOCDLIFADDR, WRITE);
  _(SIOCSIFADDRPREF, WRITE);
  _(SIOCGIFADDRPREF, READWRITE);
  _(SIOCADDMULTI, WRITE);
  _(SIOCDELMULTI, WRITE);
  _(SIOCGETVIFCNT, READWRITE);
  _(SIOCGETSGCNT, READWRITE);
  _(SIOCSIFMEDIA, READWRITE);
  _(SIOCGIFMEDIA, READWRITE);
  _(SIOCSIFGENERIC, WRITE);
  _(SIOCGIFGENERIC, READWRITE);
  _(SIOCSIFPHYADDR, WRITE);
  _(SIOCGIFPSRCADDR, READWRITE);
  _(SIOCGIFPDSTADDR, READWRITE);
  _(SIOCDIFPHYADDR, WRITE);
  _(SIOCSLIFPHYADDR, WRITE);
  _(SIOCGLIFPHYADDR, READWRITE);
  _(SIOCSIFMTU, WRITE);
  _(SIOCGIFMTU, READWRITE);
  _(SIOCSDRVSPEC, WRITE);
  _(SIOCGDRVSPEC, READWRITE);
  _(SIOCIFCREATE, WRITE);
  _(SIOCIFDESTROY, WRITE);
  _(SIOCIFGCLONERS, READWRITE);
  _(SIOCGIFDLT, READWRITE);
  _(SIOCGIFCAP, READWRITE);
  _(SIOCSIFCAP, WRITE);
  _(SIOCSVH, READWRITE);
  _(SIOCGVH, READWRITE);
  _(SIOCINITIFADDR, READWRITE);
  _(SIOCGIFDATA, READWRITE);
  _(SIOCZIFDATA, READWRITE);
  _(SIOCGLINKSTR, READWRITE);
  _(SIOCSLINKSTR, WRITE);
  _(SIOCGETHERCAP, READWRITE);
  _(SIOCGIFINDEX, READWRITE);
  _(SIOCSETPFSYNC, WRITE);
  _(SIOCGETPFSYNC, READWRITE);
  /* Entries from file: sys/timepps.h */
  _(PPS_IOC_CREATE, NONE);
  _(PPS_IOC_DESTROY, NONE);
  _(PPS_IOC_SETPARAMS, WRITE);
  _(PPS_IOC_GETPARAMS, READ);
  _(PPS_IOC_GETCAP, READ);
  _(PPS_IOC_FETCH, READWRITE);
  _(PPS_IOC_KCBIND, WRITE);
  /* Entries from file: sys/ttycom.h */
  _(TIOCEXCL, NONE);
  _(TIOCNXCL, NONE);
  _(TIOCFLUSH, WRITE);
  _(TIOCGETA, READ);
  _(TIOCSETA, WRITE);
  _(TIOCSETAW, WRITE);
  _(TIOCSETAF, WRITE);
  _(TIOCGETD, READ);
  _(TIOCSETD, WRITE);
  _(TIOCGLINED, READ);
  _(TIOCSLINED, WRITE);
  _(TIOCSBRK, NONE);
  _(TIOCCBRK, NONE);
  _(TIOCSDTR, NONE);
  _(TIOCCDTR, NONE);
  _(TIOCGPGRP, READ);
  _(TIOCSPGRP, WRITE);
  _(TIOCOUTQ, READ);
  _(TIOCSTI, WRITE);
  _(TIOCNOTTY, NONE);
  _(TIOCPKT, WRITE);
  _(TIOCSTOP, NONE);
  _(TIOCSTART, NONE);
  _(TIOCMSET, WRITE);
  _(TIOCMBIS, WRITE);
  _(TIOCMBIC, WRITE);
  _(TIOCMGET, READ);
  _(TIOCREMOTE, WRITE);
  _(TIOCGWINSZ, READ);
  _(TIOCSWINSZ, WRITE);
  _(TIOCUCNTL, WRITE);
  _(TIOCSTAT, WRITE);
  _(TIOCGSID, READ);
  _(TIOCCONS, WRITE);
  _(TIOCSCTTY, NONE);
  _(TIOCEXT, WRITE);
  _(TIOCSIG, NONE);
  _(TIOCDRAIN, NONE);
  _(TIOCGFLAGS, READ);
  _(TIOCSFLAGS, WRITE);
  _(TIOCDCDTIMESTAMP, READ);
  _(TIOCRCVFRAME, WRITE);
  _(TIOCXMTFRAME, WRITE);
  _(TIOCPTMGET, READ);
  _(TIOCGRANTPT, NONE);
  _(TIOCPTSNAME, READ);
  _(TIOCSQSIZE, WRITE);
  _(TIOCGQSIZE, READ);
  /* Entries from file: sys/verified_exec.h */
  _(VERIEXEC_LOAD, WRITE);
  _(VERIEXEC_TABLESIZE, WRITE);
  _(VERIEXEC_DELETE, WRITE);
  _(VERIEXEC_QUERY, READWRITE);
  _(VERIEXEC_DUMP, READ);
  _(VERIEXEC_FLUSH, NONE);
  /* Entries from file: sys/videoio.h */
  _(VIDIOC_QUERYCAP, READ);
  _(VIDIOC_RESERVED, NONE);
  _(VIDIOC_ENUM_FMT, READWRITE);
  _(VIDIOC_G_FMT, READWRITE);
  _(VIDIOC_S_FMT, READWRITE);
  _(VIDIOC_REQBUFS, READWRITE);
  _(VIDIOC_QUERYBUF, READWRITE);
  _(VIDIOC_G_FBUF, READ);
  _(VIDIOC_S_FBUF, WRITE);
  _(VIDIOC_OVERLAY, WRITE);
  _(VIDIOC_QBUF, READWRITE);
  _(VIDIOC_DQBUF, READWRITE);
  _(VIDIOC_STREAMON, WRITE);
  _(VIDIOC_STREAMOFF, WRITE);
  _(VIDIOC_G_PARM, READWRITE);
  _(VIDIOC_S_PARM, READWRITE);
  _(VIDIOC_G_STD, READ);
  _(VIDIOC_S_STD, WRITE);
  _(VIDIOC_ENUMSTD, READWRITE);
  _(VIDIOC_ENUMINPUT, READWRITE);
  _(VIDIOC_G_CTRL, READWRITE);
  _(VIDIOC_S_CTRL, READWRITE);
  _(VIDIOC_G_TUNER, READWRITE);
  _(VIDIOC_S_TUNER, WRITE);
  _(VIDIOC_G_AUDIO, READ);
  _(VIDIOC_S_AUDIO, WRITE);
  _(VIDIOC_QUERYCTRL, READWRITE);
  _(VIDIOC_QUERYMENU, READWRITE);
  _(VIDIOC_G_INPUT, READ);
  _(VIDIOC_S_INPUT, READWRITE);
  _(VIDIOC_G_OUTPUT, READ);
  _(VIDIOC_S_OUTPUT, READWRITE);
  _(VIDIOC_ENUMOUTPUT, READWRITE);
  _(VIDIOC_G_AUDOUT, READ);
  _(VIDIOC_S_AUDOUT, WRITE);
  _(VIDIOC_G_MODULATOR, READWRITE);
  _(VIDIOC_S_MODULATOR, WRITE);
  _(VIDIOC_G_FREQUENCY, READWRITE);
  _(VIDIOC_S_FREQUENCY, WRITE);
  _(VIDIOC_CROPCAP, READWRITE);
  _(VIDIOC_G_CROP, READWRITE);
  _(VIDIOC_S_CROP, WRITE);
  _(VIDIOC_G_JPEGCOMP, READ);
  _(VIDIOC_S_JPEGCOMP, WRITE);
  _(VIDIOC_QUERYSTD, READ);
  _(VIDIOC_TRY_FMT, READWRITE);
  _(VIDIOC_ENUMAUDIO, READWRITE);
  _(VIDIOC_ENUMAUDOUT, READWRITE);
  _(VIDIOC_G_PRIORITY, READ);
  _(VIDIOC_S_PRIORITY, WRITE);
  _(VIDIOC_ENUM_FRAMESIZES, READWRITE);
  _(VIDIOC_ENUM_FRAMEINTERVALS, READWRITE);
  /* Entries from file: sys/wdog.h */
  _(WDOGIOC_GMODE, READWRITE);
  _(WDOGIOC_SMODE, WRITE);
  _(WDOGIOC_WHICH, READ);
  _(WDOGIOC_TICKLE, NONE);
  _(WDOGIOC_GTICKLER, READ);
  _(WDOGIOC_GWDOGS, READWRITE);
  /* Entries from file: soundcard.h */
  _(SNDCTL_DSP_RESET, NONE);
  _(SNDCTL_DSP_SYNC, NONE);
  _(SNDCTL_DSP_SPEED, READWRITE);
  _(SOUND_PCM_READ_RATE, READ);
  _(SNDCTL_DSP_STEREO, READWRITE);
  _(SNDCTL_DSP_GETBLKSIZE, READWRITE);
  _(SNDCTL_DSP_SETFMT, READWRITE);
  _(SOUND_PCM_READ_BITS, READ);
  _(SNDCTL_DSP_CHANNELS, READWRITE);
  _(SOUND_PCM_READ_CHANNELS, READ);
  _(SOUND_PCM_WRITE_FILTER, READWRITE);
  _(SOUND_PCM_READ_FILTER, READ);
  _(SNDCTL_DSP_POST, NONE);
  _(SNDCTL_DSP_SUBDIVIDE, READWRITE);
  _(SNDCTL_DSP_SETFRAGMENT, READWRITE);
  _(SNDCTL_DSP_GETFMTS, READ);
  _(SNDCTL_DSP_GETOSPACE, READ);
  _(SNDCTL_DSP_GETISPACE, READ);
  _(SNDCTL_DSP_NONBLOCK, NONE);
  _(SNDCTL_DSP_GETCAPS, READ);
  _(SNDCTL_DSP_GETTRIGGER, READ);
  _(SNDCTL_DSP_SETTRIGGER, WRITE);
  _(SNDCTL_DSP_GETIPTR, READ);
  _(SNDCTL_DSP_GETOPTR, READ);
  _(SNDCTL_DSP_MAPINBUF, READ);
  _(SNDCTL_DSP_MAPOUTBUF, READ);
  _(SNDCTL_DSP_SETSYNCRO, NONE);
  _(SNDCTL_DSP_SETDUPLEX, NONE);
  _(SNDCTL_DSP_PROFILE, WRITE);
  _(SNDCTL_DSP_GETODELAY, READ);
  _(SOUND_MIXER_INFO, READ);
  _(SOUND_OLD_MIXER_INFO, READ);
  _(OSS_GETVERSION, READ);
  _(SNDCTL_SYSINFO, READ);
  _(SNDCTL_AUDIOINFO, READWRITE);
  _(SNDCTL_ENGINEINFO, READWRITE);
  _(SNDCTL_DSP_GETPLAYVOL, READ);
  _(SNDCTL_DSP_SETPLAYVOL, WRITE);
  _(SNDCTL_DSP_GETRECVOL, READ);
  _(SNDCTL_DSP_SETRECVOL, WRITE);
  _(SNDCTL_DSP_SKIP, NONE);
  _(SNDCTL_DSP_SILENCE, NONE);
  /* Entries from file: xen/xenio.h */
  _(EVTCHN_RESET, NONE);
  _(EVTCHN_BIND, WRITE);
  _(EVTCHN_UNBIND, WRITE);
#undef _
}

static bool ioctl_initialized = false;

struct ioctl_desc_compare {
  bool operator()(const ioctl_desc &left, const ioctl_desc &right) const {
    return left.req < right.req;
  }
};

static void ioctl_init() {
  ioctl_table_fill();
  InternalSort(&ioctl_table, ioctl_table_size, ioctl_desc_compare());

  bool bad = false;
  for (unsigned i = 0; i < ioctl_table_size - 1; ++i) {
    if (ioctl_table[i].req >= ioctl_table[i + 1].req) {
      Printf("Duplicate or unsorted ioctl request id %x >= %x (%s vs %s)\n",
             ioctl_table[i].req, ioctl_table[i + 1].req, ioctl_table[i].name,
             ioctl_table[i + 1].name);
      bad = true;
    }
  }

  if (bad)
    Die();

  ioctl_initialized = true;
}

static const ioctl_desc *ioctl_table_lookup(unsigned req) {
  int left = 0;
  int right = ioctl_table_size;
  while (left < right) {
    int mid = (left + right) / 2;
    if (ioctl_table[mid].req < req)
      left = mid + 1;
    else
      right = mid;
  }
  if (left == right && ioctl_table[left].req == req)
    return ioctl_table + left;
  else
    return nullptr;
}

static bool ioctl_decode(unsigned req, ioctl_desc *desc) {
  CHECK(desc);
  desc->req = req;
  desc->name = "<DECODED_IOCTL>";
  desc->size = IOC_SIZE(req);
  // Sanity check.
  if (desc->size > 0xFFFF)
    return false;
  unsigned dir = IOC_DIR(req);
  switch (dir) {
  case IOC_NONE:
    desc->type = ioctl_desc::NONE;
    break;
  case IOC_READ | IOC_WRITE:
    desc->type = ioctl_desc::READWRITE;
    break;
  case IOC_READ:
    desc->type = ioctl_desc::WRITE;
    break;
  case IOC_WRITE:
    desc->type = ioctl_desc::READ;
    break;
  default:
    return false;
  }
  // Size can be 0 iff type is NONE.
  if ((desc->type == IOC_NONE) != (desc->size == 0))
    return false;
  // Sanity check.
  if (IOC_TYPE(req) == 0)
    return false;
  return true;
}

static const ioctl_desc *ioctl_lookup(unsigned req) {
  const ioctl_desc *desc = ioctl_table_lookup(req);
  if (desc)
    return desc;

  // Try stripping access size from the request id.
  desc = ioctl_table_lookup(req & ~(IOC_SIZEMASK << IOC_SIZESHIFT));
  // Sanity check: requests that encode access size are either read or write and
  // have size of 0 in the table.
  if (desc && desc->size == 0 &&
      (desc->type == ioctl_desc::READWRITE || desc->type == ioctl_desc::WRITE ||
       desc->type == ioctl_desc::READ))
    return desc;
  return nullptr;
}

static void ioctl_common_pre(void *ctx, const ioctl_desc *desc, int d,
                             unsigned request, void *arg) {
  if (desc->type == ioctl_desc::READ || desc->type == ioctl_desc::READWRITE) {
    unsigned size = desc->size ? desc->size : IOC_SIZE(request);
    COMMON_INTERCEPTOR_READ_RANGE(ctx, arg, size);
  }
  if (desc->type != ioctl_desc::CUSTOM)
    return;
  if (request == IOCTL_SIOCGIFCONF) {
    struct __sanitizer_ifconf *ifc = (__sanitizer_ifconf *)arg;
    COMMON_INTERCEPTOR_READ_RANGE(ctx, (char *)&ifc->ifc_len,
                                  sizeof(ifc->ifc_len));
  }
}

static void ioctl_common_post(void *ctx, const ioctl_desc *desc, int res, int d,
                              unsigned request, void *arg) {
  if (desc->type == ioctl_desc::WRITE || desc->type == ioctl_desc::READWRITE) {
    // FIXME: add verbose output
    unsigned size = desc->size ? desc->size : IOC_SIZE(request);
    COMMON_INTERCEPTOR_WRITE_RANGE(ctx, arg, size);
  }
  if (desc->type != ioctl_desc::CUSTOM)
    return;
  if (request == IOCTL_SIOCGIFCONF) {
    struct __sanitizer_ifconf *ifc = (__sanitizer_ifconf *)arg;
    COMMON_INTERCEPTOR_WRITE_RANGE(ctx, ifc->ifc_ifcu.ifcu_req, ifc->ifc_len);
  }
}
